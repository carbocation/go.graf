Cache threads that are requested. Come up with a low-cost way to 
check to see if a tree element has been invalidated and re-load 
only if so.

Add flash cookie if your login failed. Redirect to login form on 
failed login. Redirect to target page on successful login. 

Create view forms of each struct. They will incorporate the data 
form by composition, e.g.: type ViewEntry { Entry, Points int64 }
Note ^ Might just want to create smarter getters and setters for 
the structs, and declare the complete set of data on the structs 
that you might want, but only populate/access what is needed.
And, you know, cache stuff.

Probably want to create a standardized way of passing data to 
the templates. You probably want 2+ fields:
  1: Global context. This contains sitewide global vales. 
  2: Session context. This contains user-specific values for the 
  current session.
Then, every _base template can depend on both of those being present, 
so you will not break them by accidentally leaving one of those two out, 
and you will not create _base templates that include something outside
that scope. 

Redirect requests coming to /thread/1 to /thread/1/title-of-thread 
programmatically always. If it's an error, redirect to an error page.